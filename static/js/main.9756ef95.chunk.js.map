{"version":3,"sources":["axios.js","App.js","index.js"],"names":["instance","axios","create","baseURL","App","useState","input","setInput","translate","setTranslate","loading","setLoading","base","setBase","target","setTarget","idioms","setIdioms","sendData","a","post","words","idiom","then","response","data","translations","translation","className","Box","sx","minWidth","FormControl","fullWidth","InputLabel","id","Select","labelId","value","label","onChange","event","MenuItem","TextareaAutosize","rowsMax","placeholder","Button","variant","color","onClick","startIcon","CircularProgress","size","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.9756ef95.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://ibm-translate.herokuapp.com/'\r\n})\r\n\r\nexport default instance\r\n","import \"./styles.css\";\nimport { useState } from \"react\";\nimport axios from \"./axios\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  Box,\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextareaAutosize,\n} from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nexport default function App() {\n  const [input, setInput] = useState(\"\");\n  const [translate, setTranslate] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const [base, setBase] = useState(\"\");\n  const [target, setTarget] = useState(\"\");\n  const [idioms, setIdioms] = useState(\"\");\n\n  const sendData = async (idioms) => {\n    setLoading(true);\n    axios\n      .post(\"/translate/result\", {\n        words: input,\n        idiom: idioms,\n      })\n      .then((response) => {\n        setLoading(false);\n        setTranslate(response.data.translations[0].translation);\n      });\n  };\n\n  const cleanData = () => {\n    setInput(\"\");\n    setTranslate(\"\");\n  };\n\n  const detectedIdiom = () => {\n    base == target ? setTranslate(input) : (setIdioms(base + \"-\" + target), sendData(idioms));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>IBM Translate</h1>\n\n      <div className=\"container\">\n        <div className=\"card\">\n          <Box sx={{ minWidth: 120 }}>\n            <FormControl fullWidth>\n              <InputLabel id=\"label-tras\">Idiom</InputLabel>\n              <Select\n                labelId=\"select-label-tras\"\n                id=\"select-tras\"\n                value={base}\n                label=\"Idiom\"\n                onChange={(event) => {\n                  setBase(event.target.value);\n                }}\n              >\n                <MenuItem value={\"es\"}>Español</MenuItem>\n                <MenuItem value={\"en\"}>Ingles</MenuItem>\n                <MenuItem value={\"fr\"}>Frances</MenuItem>\n              </Select>\n            </FormControl>\n          </Box>\n          <TextareaAutosize\n            className=\"area\"\n            rowsMax={8}\n            aria-label=\"maximum height\"\n            placeholder=\"Type a text ...\"\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n        </div>\n        <div className=\"command\">\n          <Button\n            className=\"button\"\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={detectedIdiom}\n            startIcon={<SendIcon />}\n          >\n            Send\n          </Button>\n\n          {loading && <CircularProgress className=\"spinner\" size={68} />}\n\n          <Button\n            className=\"button\"\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={cleanData}\n            startIcon={<DeleteIcon />}\n          >\n            Clean\n          </Button>\n        </div>\n        <div className=\"card\">\n          <Box sx={{ minWidth: 120 }}>\n            <FormControl fullWidth>\n              <InputLabel id=\"label\">Idiom</InputLabel>\n              <Select\n                labelId=\"select-label\"\n                id=\"select\"\n                value={target}\n                label=\"Idiom\"\n                onChange={(event) => {\n                  setTarget(event.target.value);\n                }}\n              >\n                <MenuItem value={\"es\"}>Español</MenuItem>\n                <MenuItem value={\"en\"}>Ingles</MenuItem>\n                <MenuItem value={\"fr\"}>Frances</MenuItem>\n              </Select>\n            </FormControl>\n          </Box>\n          <TextareaAutosize\n            rowsMax={8}\n            className=\"area\"\n            aria-label=\"maximum height\"\n            placeholder=\"Result\"\n            value={translate}\n            onChange={(event) => setTranslate(event.target.value)}\n          />\n        </div>\n      </div>\n\n      <br />\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}